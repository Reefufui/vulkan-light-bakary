#version 460

#extension GL_GOOGLE_include_directive : enable
//#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
//#extension GL_ARB_separate_shader_objects : enable

#include "hardcoded_sh_basis.h"

#define WORKGROUP_SIZE 16
#define PI 3.1415926538f

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(push_constant) uniform PushConstants
{
    int width;
    int height;
} constants;

layout (set = 0, binding = 0, rgba8) uniform image2D environmentMap;
layout (set = 0, binding = 1)        buffer buff { vec3 coeffs[16]; };

vec3 toVector(float phi, float theta)
{
    float r = sin(theta);
    return vec3(r * cos(phi), r * sin(phi), cos(theta));
}

float u2phi(int u)
{
    return PI * float(u) + 2. * PI / float(constants.width);
}

float v2theta(int v)
{
    return PI * float(v) / 2. + PI / (2. * float(constants.height));
}

float calcWeight(ivec2 uv)
{
    float pixelArea  = (2. * PI / float(constants.width)) * (PI / float(constants.height));
    return pixelArea * sin(v2theta(uv.y));
}

void main()
{
    if (gl_GlobalInvocationID.x >= constants.width || gl_GlobalInvocationID.y >= constants.height)
        return;

    ivec2 uv = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    vec3  dir    = toVector(u2phi(uv.x), v2theta(uv.y));
    vec3  color  = imageLoad(environmentMap, uv).xyz;
    float weight = calcWeight(uv);

    for (int l = 0; l < 4; ++l)
    {
        for (int m = -l; m < l + 1; ++m)
        {
            coeffs[l * (l + 1) + m] += weight * color * vec3(SH(l, m, dir));
        }
    }
}

