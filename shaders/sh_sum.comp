#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout  : enable
//#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
//#extension GL_ARB_separate_shader_objects : enable

#include "sh_common.h"

#define WORKGROUP_SIZE 16

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(push_constant) uniform PushConstants
{
    int width;
    int height;
} constants;

layout (set = 0, binding = 0, rgba8)  uniform image2D environmentMap;
layout (set = 0, binding = 1, scalar) buffer buff { vec3 coeffs[16]; };

void main()
{
    if (gl_GlobalInvocationID.x >= constants.width || gl_GlobalInvocationID.y >= constants.height) return;

    const ivec2 xy    = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    const vec3  dir   = toVector(x2phi(xy.x, constants.width), y2theta(xy.y, constants.height));
    vec3        color = vec3(0.f);
    const float normConst = calcNormalizationConst(constants.height, constants.width);

    for (int l = 0; l < 4; l++)
    {
        for (int m = -l; m < l + 1; m++)
        {
            color += coeffs[l * (l + 1) + m] * SH(l, m, dir) * 10.0f;
        }
    }

    imageStore(environmentMap, xy, vec4(color, 1.f));
}

